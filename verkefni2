#pragma config(Sensor, in1,    Gyro,           sensorGyro)
#pragma config(Sensor, in2,    Light,          sensorReflection)
#pragma config(Sensor, in3,    TapSensor,      sensorAnalog)
#pragma config(Sensor, in4,    Potent,         sensorPotentiometer)
#pragma config(Sensor, in5,    LinerRight,     sensorLineFollower)
#pragma config(Sensor, in6,    LineMid,        sensorLineFollower)
#pragma config(Sensor, in7,    LineLeft,       sensorLineFollower)
#pragma config(Sensor, dgtl1,  encoRS,         sensorRotation)
#pragma config(Sensor, dgtl2,  encoRS2,        sensorRotation)
#pragma config(Sensor, dgtl7,  encoRS,         sensorRotation)
#pragma config(Sensor, dgtl8,  encoRS2,        sensorRotation)
#pragma config(Sensor, dgtl9,  encoLS,         sensorRotation)
#pragma config(Sensor, dgtl10, encoLS2,        sensorRotation)
#pragma config(Sensor, dgtl11, SonarIN,        sensorSONAR_cm)
#pragma config(Motor,  port1,           rightMotor,    tmotorVex393, openLoop)
#pragma config(Motor,  port2,           clawMotor,     tmotorVex393, openLoop)
#pragma config(Motor,  port9,           armMotor,      tmotorVex269, openLoop)
#pragma config(Motor,  port10,          leftMotor,     tmotorVex393, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*----------------------------------------------------------------------------------------------------*\
|*                                         - Drive Fall -                                         		*|
|*                                      ROBOTC on VEX 2.0 CORTEX                                      *|
|*                                                                                                    *|
|*  This program instructs your robot to move forward and backwards	with a remote			*|
|* 	and use a robotic arm with a claw.																																*|
\*-----------------------------------------------------------------------------------------------4246-*/
//+++++++++++++++++++++++++++++++++++++++++++++| MAIN |+++++++++++++++++++++++++++++++++++++++++++++++

task main()
{
  int joy_x;            // x hreyfing +-127
  int joy_y;            // y hreyfing +-127
  int threshold = 10;   // faerist ekki thegar joystick er ohreyft

  while(1 == 1)
  {
    joy_x = vexRT[Ch1];   // tengja vinstri vid fjarstyringu
    joy_y = vexRT[Ch2];   // tengja haegri vid fjarstyringu

    // afram og jakvaed snuningur
    if((abs(joy_x) > threshold) && (abs(joy_y) > threshold) && (joy_y > 0))
    {
      motor[leftMotor]  = (joy_y + joy_x)/2;
      motor[rightMotor] = (joy_y - joy_x)/2;
    }
    // tilbaka og neikvaedur snuningur
    else if((abs(joy_x) > threshold) && (abs(joy_y) > threshold) && (joy_y < 0))
    {
      motor[leftMotor]  = (joy_y - joy_x)/2;
      motor[rightMotor] = (joy_y + joy_x)/2;
    }
    // Snyst a sama stad
    else if((abs(joy_x) > threshold) && (abs(joy_y) < threshold))
    {
      motor[leftMotor]  = joy_x;
      motor[rightMotor] = (-1 * joy_x);
    }
    // stendur kyrr
    else
    {
      motor[leftMotor]  = 0;
      motor[rightMotor] = 0;
    }
  }
		//armur
    if(vexRT[Btn6U] == 1)
    {
      motor[armMotor] = 40;
    }
    else if(vexRT[Btn6D] == 1)
    {
      motor[armMotor] = -40;
    }
    else
    {
      motor[armMotor] = 0;
    }
    // opna og loka klonni
		if(vexRT[Btn5U] == 1)       	//ef Button 5U er ytt
		{
			motor[clawMotor] = 127;  		//loka klonni
		}
		else if(vexRT[Btn5D] == 1)  	//ef Button 5D er ytt
		{
			motor[clawMotor] = -127; 		//opna klona
		}
		else                      		//ef ytt er a hvorugan takka
		{
			motor[clawMotor] = 0;    		//ekki gera neitt
		}
  }
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
